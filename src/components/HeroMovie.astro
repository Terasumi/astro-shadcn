---
import type { ResponseFlimType } from "@/types";

import { Image } from "astro:assets";
import { getSecret } from "astro:env/server";
import { getCachedValue, setCachedValue } from "@/lib/server-cache";
import { resolveImageUrl, imagePresets } from "@/lib/wsrv";

const PUBLIC_PHIM_MOI = getSecret("PUBLIC_PHIM_MOI");
const HERO_CACHE_KEY = "hero:latest";
const HERO_CACHE_TTL_SECONDS = 3600 * 3; // keep the hero data warm for 3 hours

let latestData: ResponseFlimType | undefined = getCachedValue<ResponseFlimType>(HERO_CACHE_KEY);

if (!latestData && PUBLIC_PHIM_MOI) {
    const latestResponse = await fetch(
        `${PUBLIC_PHIM_MOI}/danh-sach/phim-moi-cap-nhat?page=1`,
        {
            cache: "force-cache",
            headers: {
                "Cache-Control": `max-age=${3600 * 6}, s-maxage=${3600 * 6}, stale-while-revalidate=${3600 * 12}`,
            },
        },
    );

    latestData = await latestResponse.json();
    if (latestData) {
        setCachedValue(HERO_CACHE_KEY, latestData, HERO_CACHE_TTL_SECONDS);
    }
}

const items = latestData?.items ?? [];

const featured = items.slice(0, 5);
const hasFeatured = featured.length > 0;
const heroPreset = imagePresets.hero;
---

<section
    class="relative mx-auto flex w-full flex-col gap-10 px-4 pt-6 pb-12 sm:gap-12 sm:px-8 sm:pt-8"
>
    {
        hasFeatured ? (
            <div class="relative rounded-3xl bg-slate-900/70 shadow-2xl ring-1 ring-white/10" data-carousel="hero">
                <div class="relative min-h-[22rem] overflow-hidden sm:min-h-[28rem] md:min-h-[32rem]">
                    {featured.map((item, index) => (
                        <article
                            class={`absolute inset-0 h-full w-full transition-opacity duration-500 ${
                                index === 0
                                    ? "z-20 opacity-100"
                                    : "z-10 pointer-events-none opacity-0"
                            }`}
                            data-slide
                            data-index={index}
                            aria-hidden={index === 0 ? "false" : "true"}
                        >
                            <div class="absolute inset-0 overflow-hidden rounded-3xl">
                                {(() => {
                                    const imageSource = resolveImageUrl(item?.thumb_url ?? item?.poster_url);
                                    if (!imageSource) return null;

                                    return (
                                        <Image
                                            src={imageSource}
                                            alt={item.name}
                                            width={heroPreset.dimension.width}
                                            height={heroPreset.dimension.height}
                                            widths={heroPreset.widths}
                                            sizes={heroPreset.sizes}
                                            quality={heroPreset.quality}
                                            fit="cover"
                                            loading={index === 0 ? "eager" : "lazy"}
                                            fetchpriority={index === 0 ? "high" : "auto"}
                                            class="pointer-events-none h-full w-full object-cover opacity-70"
                                            style="mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 0.65) 70%, rgba(0, 0, 0, 0.4) 100%);"
                                        />
                                    );
                                })()}
                                <div class="pointer-events-none absolute inset-0 bg-gradient-to-t from-slate-950 via-slate-950/40 to-slate-950/20" />
                            </div>

                            <div class="relative flex h-full flex-col justify-end gap-6 px-5 pb-14 pt-10 text-center sm:px-10 sm:text-left md:px-14 lg:px-20">
                                <div class="flex justify-center sm:justify-start">
                                    <span class="rounded-full bg-white/15 px-3 py-1 text-xs font-medium uppercase tracking-wide sm:text-sm">
                                        Mới cập nhật
                                    </span>                                    
                                </div>

                                <div class="mx-auto max-w-xl space-y-3 sm:mx-0 sm:max-w-3xl">
                                    <h1 class="text-3xl font-bold tracking-tight sm:text-5xl md:text-6xl">
                                        {item.name}
                                    </h1>
                                    <p class="text-sm text-white/80 sm:text-base">
                                        {item.origin_name}
                                    </p>
                                </div>

                                <div class="flex flex-wrap items-center justify-center gap-3 sm:justify-start sm:gap-4">
                                    <a
                                        href={`/phim/${item.slug}`}
                                        class="inline-flex items-center justify-center rounded-full bg-white px-6 py-2 text-sm font-semibold text-slate-900 transition hover:bg-sky-200"
                                        tabindex={index === 0 ? "0" : "-1"}
                                    >
                                        Xem ngay
                                    </a>
                                    <a
                                        href={`/phim/${item.slug}`}
                                        class="inline-flex items-center justify-center rounded-full border border-white/30 px-6 py-2 text-sm font-semibold text-white transition hover:border-white hover:bg-white/10"
                                        tabindex={index === 0 ? "0" : "-1"}
                                    >
                                        Chi tiết
                                    </a>
                                </div>
                            </div>
                        </article>
                    ))}
                </div>

                {featured.length > 1 && (
                    <>
                        <div class="pointer-events-auto absolute inset-y-0 left-0 z-40 flex items-center px-2 sm:px-3">
                            <button
                                type="button"
                                class="z-50 inline-flex h-10 w-10 items-center justify-center rounded-full bg-slate-900 text-white shadow-lg ring-2 ring-sky-300/70 transition hover:bg-slate-800 sm:h-12 sm:w-12"
                                data-prev
                                aria-label="Phim trước"
                            >
                                <span aria-hidden="true">‹</span>
                            </button>
                        </div>
                        <div class="pointer-events-auto absolute inset-y-0 right-0 z-40 flex items-center px-2 sm:px-3">
                            <button
                                type="button"
                                class="z-50 inline-flex h-10 w-10 items-center justify-center rounded-full bg-slate-900 text-white shadow-lg ring-2 ring-sky-300/70 transition hover:bg-slate-800 sm:h-12 sm:w-12"
                                data-next
                                aria-label="Phim tiếp"
                            >
                                <span aria-hidden="true">›</span>
                            </button>
                        </div>
                        <div class="pointer-events-none absolute inset-x-0 bottom-8 z-40 flex justify-center gap-2">
                            {featured.map((item, index) => (
                                <button
                                    type="button"
                                    class={`pointer-events-auto h-2 w-8 rounded-full transition ${
                                        index === 0 ? "bg-white" : "bg-white/30"
                                    }`}
                                    data-dot
                                    data-index={index}
                                    aria-label={`Chuyển tới phim ${item.name}`}
                                />
                            ))}
                        </div>
                    </>
                )}
            </div>
        ) : (
            <div class="rounded-3xl border border-white/10 bg-slate-900/70 p-12 text-center text-sm text-white/70">
                Không thể tải dữ liệu phim mới. Vui lòng thử lại sau.
            </div>
        )
    }

    {featured.length > 1 && (
        <script is:inline>
            const heroCarousel = document.querySelector('[data-carousel="hero"]');
            if (heroCarousel) {
                const slides = Array.from(heroCarousel.querySelectorAll('[data-slide]'));
                const dots = Array.from(heroCarousel.querySelectorAll('[data-dot]'));
                const prevButton = heroCarousel.querySelector('[data-prev]');
                const nextButton = heroCarousel.querySelector('[data-next]');
                let activeIndex = 0;

                const toggleSlide = (index) => {
                    if (!slides.length) return;
                    activeIndex = (index + slides.length) % slides.length;

                    slides.forEach((slide, slideIndex) => {
                        const isActive = slideIndex === activeIndex;
                        slide.classList.toggle('opacity-0', !isActive);
                        slide.classList.toggle('pointer-events-none', !isActive);
                        slide.classList.toggle('opacity-100', isActive);
                        slide.classList.toggle('z-20', isActive);
                        slide.classList.toggle('z-10', !isActive);
                        slide.setAttribute('aria-hidden', (!isActive).toString());
                        
                        // Update tabindex for all links in the slide
                        const links = slide.querySelectorAll('a');
                        links.forEach(link => {
                            link.setAttribute('tabindex', isActive ? '0' : '-1');
                        });
                    });

                    dots.forEach((dot, dotIndex) => {
                        const isActive = dotIndex === activeIndex;
                        dot.classList.toggle('bg-white', isActive);
                        dot.classList.toggle('bg-white/30', !isActive);
                    });
                };

                const handleNext = () => toggleSlide(activeIndex + 1);
                const handlePrev = () => toggleSlide(activeIndex - 1);

                let autoIntervalId;
                const clearAuto = () => {
                    if (autoIntervalId) {
                        clearInterval(autoIntervalId);
                        autoIntervalId = undefined;
                    }
                };
                const startAuto = () => {
                    clearAuto();
                    autoIntervalId = window.setInterval(handleNext, 5000);
                };
                const restartAuto = () => {
                    startAuto();
                };

                nextButton?.addEventListener('click', handleNext);
                prevButton?.addEventListener('click', handlePrev);
                dots.forEach((dot) => {
                    dot.addEventListener('click', () => {
                        const index = Number.parseInt(dot.dataset.index ?? '0', 10);
                        toggleSlide(index);
                    });
                });

                // optional: keyboard arrow support when carousel focused
                heroCarousel.addEventListener('keydown', (event) => {
                    if (event.key === 'ArrowRight') {
                        event.preventDefault();
                        handleNext();
                        restartAuto();
                    }
                    if (event.key === 'ArrowLeft') {
                        event.preventDefault();
                        handlePrev();
                        restartAuto();
                    }
                });

                heroCarousel.setAttribute('tabindex', '0');
                nextButton?.addEventListener('click', restartAuto);
                prevButton?.addEventListener('click', restartAuto);
                dots.forEach((dot) => {
                    dot.addEventListener('click', restartAuto);
                });
                heroCarousel.addEventListener('mouseenter', clearAuto);
                heroCarousel.addEventListener('mouseleave', startAuto);
                heroCarousel.addEventListener('focusin', clearAuto);
                heroCarousel.addEventListener('focusout', startAuto);
                document.addEventListener('visibilitychange', () => {
                    if (document.hidden) {
                        clearAuto();
                    } else {
                        startAuto();
                    }
                });

                startAuto();
            }
        </script>
    )}
</section>
