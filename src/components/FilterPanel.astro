---
interface Props {
    currentType: string;
    currentPage?: number;
    basePath?: string; // e.g., "/danh-sach/the-loai" or "/danh-sach"
}

const {
    currentType,
    currentPage = 1,
    basePath = "/danh-sach/the-loai",
} = Astro.props;

// Get query parameters from URL
const url = new URL(Astro.request.url);
const searchParams = url.searchParams;

const sortField = searchParams.get("sort_field") || "modified.time";
const sortType = searchParams.get("sort_type") || "desc";
const category = searchParams.get("category") || "";
const country = searchParams.get("country") || "";
const year = searchParams.get("year") || "";
const limit = searchParams.get("limit") || "10";

const apiBase = (
    import.meta.env.PUBLIC_PHIM_MOI || "https://phimapi.com"
).replace(/\/$/, "");

type Option = {
    name: string;
    slug: string;
};

async function fetchOptions(endpoint: string): Promise<Option[]> {
    try {
        const response = await fetch(`${apiBase}${endpoint}`, {
            headers: { Accept: "application/json" },
            cache: "force-cache",
        });

        if (!response.ok) return [];

        const data = await response.json();

        if (!Array.isArray(data)) return [];

        return data
            .filter((item) => item?.slug && item?.name)
            .map((item) => ({
                name: String(item.name),
                slug: String(item.slug),
            }));
    } catch (error) {
        console.error("FilterPanel options fetch failed", error);
        return [];
    }
}

const [categoryOptions, countryOptions] = await Promise.all([
    fetchOptions("/the-loai"),
    fetchOptions("/quoc-gia"),
]);

const currentYear = new Date().getFullYear();
const years = Array.from({ length: 55 }, (_, i) => currentYear - i);

const sortFieldLabels: Record<string, string> = {
    "modified.time": "Ngày cập nhật",
    _id: "ID phim",
    year: "Năm phát hành",
};

const sortTypeLabels: Record<string, string> = {
    desc: "Mới nhất",
    asc: "Cũ nhất",
};

const findOptionLabel = (value: string, options: Option[]) =>
    options.find((item) => item.slug === value)?.name ||
    value
        .split("-")
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join(" ");

const activeFilters = [
    {
        label: "Sắp xếp",
        value: `${sortFieldLabels[sortField] || sortField} • ${
            sortTypeLabels[sortType] || sortType
        }`,
    },
    category && {
        label: "Thể loại",
        value: findOptionLabel(category, categoryOptions),
    },
    country && {
        label: "Quốc gia",
        value: findOptionLabel(country, countryOptions),
    },
    year && { label: "Năm", value: year },
    limit !== "10" && { label: "Kết quả", value: `${limit}/trang` },
].filter(Boolean) as { label: string; value: string }[];
---

<div
    class="relative w-full overflow-hidden rounded-3xl border border-slate-800/60 bg-slate-950/70 p-[1px] shadow-xl"
>
    <div
        class="pointer-events-none absolute inset-0 bg-[radial-gradient(circle_at_top,_rgba(59,130,246,0.25),_transparent_60%)] opacity-80"
    >
    </div>

    <div class="relative rounded-3xl bg-slate-950/80 p-6 md:p-8">
        <div
            class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between"
        >
            <div class="space-y-1">
                <h3 class="text-xl font-semibold text-white">
                    Bộ lọc nâng cao
                </h3>
                <p class="text-sm text-slate-400">
                    Tinh chỉnh danh sách phim để tìm nội dung phù hợp nhất với
                    bạn.
                </p>
            </div>
            <div class="flex flex-wrap items-center gap-2">
                {
                    activeFilters.length ? (
                        activeFilters.map(({ label, value }) => (
                            <span class="flex items-center gap-2 rounded-full border border-slate-800/60 bg-slate-900/80 px-3 py-1 text-xs text-slate-200">
                                <span class="font-semibold uppercase text-slate-400">
                                    {label}
                                </span>
                                <span class="text-slate-100">{value}</span>
                            </span>
                        ))
                    ) : (
                        <span class="text-xs uppercase tracking-wide text-slate-500">
                            Chưa áp dụng bộ lọc bổ sung
                        </span>
                    )
                }
            </div>
        </div>

        <div class="mt-6 flex items-center justify-between gap-3">
            <span
                class="text-xs font-semibold uppercase tracking-wide text-slate-400"
            >
                Tuỳ chỉnh nhanh
            </span>
            <button
                id="filterToggle"
                type="button"
                class="inline-flex items-center gap-2 rounded-full border border-slate-800/60 bg-slate-900/70 px-3 py-2 text-xs font-medium text-slate-200 transition hover:border-slate-600 hover:bg-slate-900/90 md:hidden"
                aria-expanded="false"
                aria-controls="filterForm"
            >
                <span data-collapsible-label>Hiện bộ lọc</span>
                <svg
                    class="h-3 w-3 transition-transform"
                    viewBox="0 0 10 6"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <path
                        d="M1 1.25L5 4.75L9 1.25"
                        stroke="currentColor"
                        stroke-width="1.5"
                        stroke-linecap="round"
                        stroke-linejoin="round"></path>
                </svg>
            </button>
        </div>

        <form id="filterForm" class="mt-4 hidden space-y-8 md:mt-8 md:block">
            <fieldset class="space-y-4">
                <legend
                    class="text-xs font-semibold uppercase tracking-wide text-slate-400"
                >
                    Sắp xếp & hiển thị
                </legend>
                <div
                    class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4"
                >
                    <div class="flex flex-col gap-2">
                        <label
                            for="sortField"
                            class="text-sm font-medium text-slate-200"
                            >Sắp xếp theo</label
                        >
                        <select
                            id="sortField"
                            name="sortField"
                            value={sortField}
                            class="w-full rounded-xl border border-slate-800/70 bg-slate-900/70 px-4 py-3 text-sm text-slate-100 transition focus:border-primary/70 focus:outline-none focus:ring-2 focus:ring-primary/40"
                        >
                            <option value="modified.time">Ngày cập nhật</option>
                            <option value="_id">ID phim</option>
                            <option value="year">Năm phát hành</option>
                        </select>
                    </div>

                    <div class="flex flex-col gap-2">
                        <label
                            for="sortType"
                            class="text-sm font-medium text-slate-200"
                            >Thứ tự</label
                        >
                        <select
                            id="sortType"
                            name="sortType"
                            value={sortType}
                            class="w-full rounded-xl border border-slate-800/70 bg-slate-900/70 px-4 py-3 text-sm text-slate-100 transition focus:border-primary/70 focus:outline-none focus:ring-2 focus:ring-primary/40"
                        >
                            <option value="desc">Mới nhất</option>
                            <option value="asc">Cũ nhất</option>
                        </select>
                    </div>

                    <div class="flex flex-col gap-2">
                        <label
                            for="year"
                            class="text-sm font-medium text-slate-200"
                            >Năm phát hành</label
                        >
                        <select
                            id="year"
                            name="year"
                            value={year}
                            class="w-full rounded-xl border border-slate-800/70 bg-slate-900/70 px-4 py-3 text-sm text-slate-100 transition focus:border-primary/70 focus:outline-none focus:ring-2 focus:ring-primary/40"
                        >
                            <option value="">Tất cả</option>
                            {
                                years.map((y) => (
                                    <option value={String(y)}>{y}</option>
                                ))
                            }
                        </select>
                    </div>

                    <div class="flex flex-col gap-2">
                        <label
                            for="limit"
                            class="text-sm font-medium text-slate-200"
                            >Số lượng/trang</label
                        >
                        <select
                            id="limit"
                            name="limit"
                            value={limit}
                            class="w-full rounded-xl border border-slate-800/70 bg-slate-900/70 px-4 py-3 text-sm text-slate-100 transition focus:border-primary/70 focus:outline-none focus:ring-2 focus:ring-primary/40"
                        >
                            <option value="10">10</option>
                            <option value="20">20</option>
                            <option value="30">30</option>
                            <option value="40">40</option>
                            <option value="50">50</option>
                            <option value="60">60</option>
                        </select>
                    </div>
                </div>
            </fieldset>

            <fieldset class="space-y-4">
                <legend
                    class="text-xs font-semibold uppercase tracking-wide text-slate-400"
                >
                    Bộ lọc nội dung
                </legend>
                <div
                    class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3"
                >
                    <div class="flex flex-col gap-2">
                        <label
                            for="category"
                            class="text-sm font-medium text-slate-200"
                            >Thể loại</label
                        >
                        <select
                            id="category"
                            name="category"
                            value={category}
                            class="w-full rounded-xl border border-slate-800/70 bg-slate-900/70 px-4 py-3 text-sm text-slate-100 transition focus:border-primary/70 focus:outline-none focus:ring-2 focus:ring-primary/40"
                        >
                            <option value="">Tất cả</option>
                            {
                                categoryOptions.map((option) => (
                                    <option value={option.slug}>
                                        {option.name}
                                    </option>
                                ))
                            }
                        </select>
                    </div>

                    <div class="flex flex-col gap-2">
                        <label
                            for="country"
                            class="text-sm font-medium text-slate-200"
                            >Quốc gia</label
                        >
                        <select
                            id="country"
                            name="country"
                            value={country}
                            class="w-full rounded-xl border border-slate-800/70 bg-slate-900/70 px-4 py-3 text-sm text-slate-100 transition focus:border-primary/70 focus:outline-none focus:ring-2 focus:ring-primary/40"
                        >
                            <option value="">Tất cả</option>
                            {
                                countryOptions.map((option) => (
                                    <option value={option.slug}>
                                        {option.name}
                                    </option>
                                ))
                            }
                        </select>
                    </div>

                    <div class="flex flex-col gap-2">
                        <label
                            for="language"
                            class="text-sm font-medium text-slate-200"
                            >Ngôn ngữ (sắp ra mắt)</label
                        >
                        <select
                            id="language"
                            disabled
                            class="w-full cursor-not-allowed rounded-xl border border-slate-800/40 bg-slate-900/40 px-4 py-3 text-sm text-slate-500"
                        >
                            <option value="">Tất cả</option>
                        </select>
                    </div>
                </div>
            </fieldset>

            <div
                class="flex flex-col gap-3 pt-2 sm:flex-row sm:items-center sm:justify-end"
            >
                <button
                    type="reset"
                    class="inline-flex w-full items-center justify-center rounded-xl border border-slate-700/80 px-5 py-3 text-sm font-medium text-slate-200 transition hover:border-slate-500 hover:bg-slate-900/70 sm:w-auto"
                >
                    Đặt lại
                </button>
                <button
                    type="submit"
                    class="inline-flex w-full items-center justify-center rounded-xl bg-primary px-5 py-3 text-sm font-semibold text-primary-foreground transition hover:bg-primary/90 sm:w-auto"
                >
                    Áp dụng bộ lọc
                </button>
            </div>
        </form>
    </div>
</div>

<script define:vars={{ basePath, currentType, currentPage }}>
    const form = document.getElementById("filterForm");

    if (!(form instanceof HTMLFormElement)) {
        console.warn("FilterPanel form not found");
        return;
    }

    const toggleButton = document.getElementById("filterToggle");
    const toggleLabel = toggleButton?.querySelector("[data-collapsible-label]");
    const toggleIcon = toggleButton?.querySelector("svg");
    const mediaQuery = window.matchMedia("(min-width: 768px)");

    const applyBreakpointState = () => {
        if (mediaQuery.matches) {
            form.classList.remove("hidden");
            toggleButton?.setAttribute("aria-expanded", "true");
            if (toggleLabel) toggleLabel.textContent = "Ẩn bộ lọc";
            toggleIcon?.classList.add("rotate-180");
        } else {
            form.classList.add("hidden");
            toggleButton?.setAttribute("aria-expanded", "false");
            if (toggleLabel) toggleLabel.textContent = "Hiện bộ lọc";
            toggleIcon?.classList.remove("rotate-180");
        }
    };

    applyBreakpointState();

    if (toggleButton) {
        toggleButton.addEventListener("click", () => {
            const isHidden = form.classList.toggle("hidden");
            const expanded = !isHidden;
            toggleButton.setAttribute("aria-expanded", expanded.toString());
            if (toggleLabel)
                toggleLabel.textContent = expanded
                    ? "Ẩn bộ lọc"
                    : "Hiện bộ lọc";
            toggleIcon?.classList.toggle("rotate-180", expanded);
        });
    }

    if (typeof mediaQuery.addEventListener === "function") {
        mediaQuery.addEventListener("change", applyBreakpointState);
    } else if (typeof mediaQuery.addListener === "function") {
        mediaQuery.addListener(applyBreakpointState);
    }

    form.addEventListener("submit", (e) => {
        e.preventDefault();

        const formData = new FormData(form);
        const params = new URLSearchParams();

        params.set("page", String(currentPage));
        params.set("sort_field", formData.get("sortField"));
        params.set("sort_type", formData.get("sortType"));

        const category = formData.get("category");
        const country = formData.get("country");
        const year = formData.get("year");

        if (category) params.set("category", category);
        if (country) params.set("country", country);
        if (year) params.set("year", year);

        params.set("limit", formData.get("limit"));

        window.location.href = `${basePath}/${currentType}?${params.toString()}`;
    });

    form.addEventListener("reset", (e) => {
        e.preventDefault();
        window.location.href = `${basePath}/${currentType}?page=1&sort_field=modified.time&sort_type=desc&limit=10`;
    });
</script>
